{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\utkar\\\\Downloads\\\\mera proj clone\\\\AI-Powered-Dynamic-Web-Personalization-Engine\\\\new proj\\\\dashboard\\\\src\\\\Segments.jsx\",\n  _s = $RefreshSig$();\n// new proj/dashboard/src/Segments.jsx\nimport React, { useState, useEffect } from \"react\";\n\n// Logic from the engine to determine the primary cluster\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction extractFeatures(events, clusterLabels) {\n  let counts = {};\n  clusterLabels.forEach(label => counts[label] = 0);\n  events.forEach(ev => {\n    var _ev$elementData;\n    if (ev.type === 'click' && (_ev$elementData = ev.elementData) !== null && _ev$elementData !== void 0 && _ev$elementData.cluster) {\n      counts[ev.elementData.cluster]++;\n    }\n  });\n  return Object.values(counts);\n}\nfunction predictCluster(features, clusterLabels) {\n  if (features.length === 0 || Math.max(...features) === 0) {\n    return \"None\";\n  }\n  let maxIdx = features.indexOf(Math.max(...features));\n  return clusterLabels[maxIdx];\n}\nexport default function Segments() {\n  _s();\n  const [dominantSegment, setDominantSegment] = useState(\"None\");\n  // This should be dynamic in a real app, but we'll hardcode for now.\n  const clusterLabels = ['sports', 'politics', 'tech', 'other'];\n  const calculateSegment = () => {\n    const data = JSON.parse(localStorage.getItem(\"user_behavior_data\")) || [];\n    const features = extractFeatures(data, clusterLabels);\n    const segment = predictCluster(features, clusterLabels);\n    setDominantSegment(segment);\n  };\n  useEffect(() => {\n    calculateSegment();\n    window.addEventListener(\"storage\", calculateSegment);\n    return () => window.removeEventListener(\"storage\", calculateSegment);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"User Segments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The dominant user segment based on tracked behavior.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [\"Current User Segment: \", dominantSegment]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(Segments, \"ALnii5llHs/lcsI6XpITALDxQJY=\");\n_c = Segments;\nvar _c;\n$RefreshReg$(_c, \"Segments\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","extractFeatures","events","clusterLabels","counts","forEach","label","ev","_ev$elementData","type","elementData","cluster","Object","values","predictCluster","features","length","Math","max","maxIdx","indexOf","Segments","_s","dominantSegment","setDominantSegment","calculateSegment","data","JSON","parse","localStorage","getItem","segment","window","addEventListener","removeEventListener","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/utkar/Downloads/mera proj clone/AI-Powered-Dynamic-Web-Personalization-Engine/new proj/dashboard/src/Segments.jsx"],"sourcesContent":["// new proj/dashboard/src/Segments.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n// Logic from the engine to determine the primary cluster\r\nfunction extractFeatures(events, clusterLabels) {\r\n  let counts = {};\r\n  clusterLabels.forEach(label => counts[label] = 0);\r\n  events.forEach(ev => {\r\n    if (ev.type === 'click' && ev.elementData?.cluster) {\r\n      counts[ev.elementData.cluster]++;\r\n    }\r\n  });\r\n  return Object.values(counts);\r\n}\r\n\r\nfunction predictCluster(features, clusterLabels) {\r\n  if (features.length === 0 || Math.max(...features) === 0) {\r\n    return \"None\";\r\n  }\r\n  let maxIdx = features.indexOf(Math.max(...features));\r\n  return clusterLabels[maxIdx];\r\n}\r\n\r\nexport default function Segments() {\r\n  const [dominantSegment, setDominantSegment] = useState(\"None\");\r\n  // This should be dynamic in a real app, but we'll hardcode for now.\r\n  const clusterLabels = ['sports', 'politics', 'tech', 'other'];\r\n\r\n  const calculateSegment = () => {\r\n    const data = JSON.parse(localStorage.getItem(\"user_behavior_data\")) || [];\r\n    const features = extractFeatures(data, clusterLabels);\r\n    const segment = predictCluster(features, clusterLabels);\r\n    setDominantSegment(segment);\r\n  };\r\n\r\n  useEffect(() => {\r\n    calculateSegment();\r\n    window.addEventListener(\"storage\", calculateSegment);\r\n    return () => window.removeEventListener(\"storage\", calculateSegment);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h2>User Segments</h2>\r\n      <p>The dominant user segment based on tracked behavior.</p>\r\n      <p>\r\n        <strong>Current User Segment: {dominantSegment}</strong>\r\n      </p>\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}